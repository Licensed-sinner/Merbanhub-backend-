# -------------------------------
# Application
# -------------------------------
spring.application.name=Merban Capital backend

# -------------------------------
# DATABASE CONFIGURATION
# -------------------------------
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# -------------------------------
# SERVER CONFIGURATION
# -------------------------------
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true


# Flyway (off until later)
spring.flyway.enabled=false

logging.level.org.springframework.web=DEBUG


# The port the app listens to on (match Docker bind below)
server.port=8080

# -------------------------------
# JPA / HIBERNATE
# -------------------------------
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# -------------------------------
# OCR SERVICE
# -------------------------------
#ocr.base.path=${OCR_BASE_PATH}

# Remote OCR API (optional). When set the backend will call the OCR service instead of local filesystem.
# Map an environment variable OCR_API_URL to this property or set it here directly.
ocr.api.url=${OCR_API_URL:}

# Optional: token to send when contacting the OCR service (set OCR_API_TOKEN in your env)
ocr.api.token=${OCR_API_TOKEN:}
# If your OCR service requires authentication, set OCR_API_TOKEN in the
# environment (or .env). The backend will add an "Authorization: Bearer <token>"
# header to outbound requests to the OCR service (list/upload/download).

# -------------------------------
# JWT CONFIGURATION
# -------------------------------
# no inline comments here!

# -------------------------------
# SECURITY
# this will dump every filter invocation and chain?selection decision
# More detailed security logging
logging.level.org.springframework.security=TRACE
logging.level.org.springframework.security.web.FilterChainProxy=DEBUG
logging.level.org.springframework.security.web.access=TRACE




# JWT Configuration
jwt.secret=${JWT_SECRET}
jwt.expiration-ms=${JWT_EXPIRATION_MS}
app.jwtSecret=${jwt.secret}
app.jwtExpirationMs=${jwt.expiration-ms}

# -------------------------------
# DOCKER COMPOSE READINESS
spring.docker.compose.readiness.tcp.connect-timeout=120s
spring.docker.compose.readiness.timeout=120s

